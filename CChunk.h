#pragma once

#include <string>
#include <vector>
#include <ostream>
#include <fstream>

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// A chunk is:
// - data size (uint32 - big endian)
// - name (4 chars)
// - data
// - CRC32 of the chunk and the data
class CChunk 
{
  public:
    ////////////////////////////////////////////////////////////////////////////
    CChunk(const std::string& inType, const std::size_t inSizeInByte);

    ////////////////////////////////////////////////////////////////////////////
    CChunk(const std::vector<uint8_t>& inData, const std::size_t inIndex);

    ////////////////////////////////////////////////////////////////////////////
    void dump(std::ostream& ioStream, bool inOneLine = true);

    ////////////////////////////////////////////////////////////////////////////
    void dump(std::ofstream& ofStream);

    ////////////////////////////////////////////////////////////////////////////
    void dump_as_header(std::ostream& oStream);

    ////////////////////////////////////////////////////////////////////////////
    uint32_t compute_CRC32() const;

    ////////////////////////////////////////////////////////////////////////////
    void update_CRC32();

    ////////////////////////////////////////////////////////////////////////////
    std::size_t get_size() const;

    ////////////////////////////////////////////////////////////////////////////
    std::string get_type() const;

    ////////////////////////////////////////////////////////////////////////////
    bool is_valid() const;

    ////////////////////////////////////////////////////////////////////////////
    static std::size_t get_header_size();

    ////////////////////////////////////////////////////////////////////////////
    static void fill_end_chunk(CChunk& outEndChunk);

  private:
    uint32_t             m_dataSize;
    char                 m_type[4];
    std::vector<uint8_t> m_data;
    uint32_t             m_crc32;
}; // class CChunk
