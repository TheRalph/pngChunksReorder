#pragma once

#include "CChunk.h"

#if 1
  #include <list>
  using chunkContainer = std::list<CChunk>;
#else
  using chunkContainer = std::vector<CChunk>;
#endif

using chunkIterator  = chunkContainer::iterator;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class CPNG 
{
  public:
    ////////////////////////////////////////////////////////////////////////////
    CPNG();

    ////////////////////////////////////////////////////////////////////////////
    bool load_from_PNG(const std::string& inName);

    ////////////////////////////////////////////////////////////////////////////
    bool save_to_PNG(const std::string& inName);

    ////////////////////////////////////////////////////////////////////////////
    std::size_t load_chunks_from_file(const std::string& inName, const std::size_t inIndex = 0);

    ////////////////////////////////////////////////////////////////////////////
    std::size_t load_chunks_from_buffer(const std::vector<uint8_t>& inBufData, const std::size_t inIndex = 0);

    ////////////////////////////////////////////////////////////////////////////
    void dump_chunks(std::ostream& ioStream, bool inOneLine = true);

    ////////////////////////////////////////////////////////////////////////////
    void reorder_data_chunks(const std::vector<std::size_t>& inNewOrder);

    ////////////////////////////////////////////////////////////////////////////
    bool get_data_range(chunkIterator& outFirstIt, chunkIterator& outLastIt);

    ////////////////////////////////////////////////////////////////////////////
    std::size_t find_next_chunk(const std::vector<uint8_t>& inBufData, std::size_t inIndex);

    ////////////////////////////////////////////////////////////////////////////
    void fix_end_chunk();

    ////////////////////////////////////////////////////////////////////////////
    // inIdChunkToKeep => -1 means the last one
    void fix_palette_chunk(const int32_t inIdChunkToKeep = -1);

    ////////////////////////////////////////////////////////////////////////////
    void fix_all();

    ////////////////////////////////////////////////////////////////////////////
    void clean_chunks(const std::vector<std::string>& inChunksToKeep={"IHDR","IDAT","IEND"});

    ////////////////////////////////////////////////////////////////////////////
    void dump_header(std::ostream& ioStream);

  private:
    chunkContainer m_chunks;
}; // class CPNG 
